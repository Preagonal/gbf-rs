name: Code Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  coverage:
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-Cinstrument-coverage"
      LLVM_PROFILE_FILE: "target/coverage/%p-%m.profraw"

    steps:
      # Step 1 - 4: (Checkout, Install Rust, etc.)

      # Step 5: Create coverage dir (optional)
      - name: Prepare coverage directory
        run: mkdir -p target/coverage

      # Step 6: Build project
      - name: Build Project
        run: cargo build --workspace

      # Step 7: Run tests with coverage
      - name: Run tests with coverage
        run: cargo test --workspace --verbose

      # Step 8: Verify coverage files
      - name: Verify coverage files
        run: ls -l target/coverage/

      # Step 9: Generate grcov report
      - name: Generate grcov report
        run: |
          mkdir -p target/coverage/html
          grcov target/coverage -s . -b ./target/debug \
            -t html --llvm --branch --ignore-not-existing \
            -o target/coverage/html

      # Step 10: Upload Coverage Report
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: grcov-coverage-report
          path: target/coverage/html

      # Optional: Upload coverage data to Codecov
      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/coverage/*.profraw
          flags: unittests
          name: gbf-rs
